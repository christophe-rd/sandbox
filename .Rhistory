#Charger datesponte
library("readxl")
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.','', datesponte$x, fixed=TRUE), fixed=TRUE))
setwd('/Users/christopherouleau-desrochers/Documents/EDUCATION/UQAM/Stages/Abitibi/projetperso/nidif_grpi/meteo/collecte_meteo/ROUYNA')
datesponte<-read_excel('/Users/christophe_rouleau-desrochers/Library/Mobile Documents/com~apple~CloudDocs/EDUCATION/UQAM/Stages/Abitibi/projetperso/nidif_grpi/datesponte.xlsx')
View(datesponte)
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.','', datesponte$x, fixed=TRUE), fixed=TRUE))
View(datesponte)
as.numeric(sub(',','.', sub('.','', datesponte$y, fixed=TRUE), fixed=TRUE))
View(datesponte)
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.','', datesponte$x, fixed=TRUE), fixed=TRUE))
as.numeric(sub(',','.', sub('.','', datesponte$y, fixed=TRUE), fixed=TRUE))
###Sélection colonnes importantes
coordinates_pileated<-datesponte[, c("CodeNidif",'DatePonte', 'x', 'y')]
View(coordinates_pileated)
###Nouveau excel avec seulement années, coordonnées et codes
install.packages("writexl")
library('writexl')
###Sélection colonnes importantes
coordinates_pileated<-datesponte[, c("CodeNidif",'DatePonte', 'x', 'y')]
###Changement année/mois/jour en année
coordinates_pileated$year=format(coordinates_pileated$DatePonte, format="%Y" )
###Nouveau fichier avec seulement année
coordinates_pileated_v2<-subset(coordinates_pileated, select=-c(DatePonte))
write_xlsx(coordinates_pileated_v2,"/Users/christophe_rouleau-desrochers/Library/Mobile Documents/com~apple~CloudDocs/EDUCATION/UQAM/Stages/Abitibi/projetperso/nidif_grpi/coordinates_pileated.xlsx")
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.'.'', datesponte$x, fixed=TRUE), fixed=TRUE))
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.'.'', datesponte$x, fixed=TRUE), fixed=TRUE))
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub(','.'', datesponte$x, fixed=TRUE), fixed=TRUE))
#####Envoie coordonnées à Dan McKenney#####
###Convertir les coordonnées de , à . ###
as.numeric(sub(',','.', sub('.','', datesponte$x, fixed=TRUE), fixed=TRUE))
View(datesponte)
as.numeric(sub(',','.', sub('.','', datesponte$y, fixed=TRUE), fixed=TRUE))
View(datesponte)
###Sélection colonnes importantes
coordinates_pileated<-datesponte[, c("CodeNidif",'DatePonte', 'x', 'y')]
###Sélection colonnes importantes
coordinates_pileated<-datesponte[, c("CodeNidif",'DatePonte', 'x', 'y')]
###Changement année/mois/jour en année
coordinates_pileated$year=format(coordinates_pileated$DatePonte, format="%Y" )
###Nouveau fichier avec seulement année
coordinates_pileated_v2<-subset(coordinates_pileated, select=-c(DatePonte))
View(coordinates_pileated)
View(coordinates_pileated_v2)
write_xlsx(coordinates_pileated_v2,"/Users/christophe_rouleau-desrochers/Library/Mobile Documents/com~apple~CloudDocs/EDUCATION/UQAM/Stages/Abitibi/projetperso/nidif_grpi/coordinates_pileated.xlsx")
View(coordinates_pileated)
write_xlsx(coordinates_pileated_v2,"/Users/christophe_rouleau-desrochers/Library/Mobile Documents/com~apple~CloudDocs/EDUCATION/UQAM/Stages/Abitibi/projetperso/nidif_grpi/coordinates_pileated_v2.xlsx")
#packages
install.packages('readxl')
library('tidyverse')
ls -l /Library/Frameworks/R.framework/Versions/
library('tidyverse')
ln -s
# housekeeping
rm(list=ls())
options(stringsAsFactors=FALSE)
### Install packages if not already in system library
# install.packages("devtools")
library("devtools")
# devtools::install_github("ropensci/plotly")
library(plotly)
# devtools::install_github("ropensci/plotly")
library(ggplot2)
library(plotly)
### Install packages if not already in system library
# install.packages("devtools")
library("devtools")
# devtools::install_github("ropensci/plotly")
library(ggplot2)
library(plotly)
library(rjson)
library("RColorBrewer")
library(tidyverse)
library(dplyr)
# Directory Christophe
directory_path <- "/Users/christophe_rouleau-desrochers/Documents/github"
# Set Working Directory
setwd(directory_path)
# read csv
d <- read.csv("asevdiversitydup/rootstockxscion/rootstockscionlatlon.csv")
duse <- subset(d, use=="yes")
# Delete rows where multiple locations for the same paper to avoid redundancy
duse_no_dupplicats<-duse[!duplicated(duse$title),]
# Create a new table grouped by country and the number of papers published in each
occurence <- duse_no_dupplicats %>%
group_by(COUNTRY) %>%
summarize(code = first(CODE), count = n())
head(occurence)
# set boundaries to light grey
l <- list(color = toRGB("#D3D3D3"), width = 0.5)
g <- list(
projection = list(
type = 'equirectangular' # the ones I like: orthographic, mercator. Source: https://plotly.com/r/map-configuration/#map-projections
),
resolution = 50,
scope = "world",
showcoastlines=TRUE,
showland=TRUE,
landcolor = toRGB("#F5F5F5")  # white smoke # for rgb colors: https://www.rapidtables.com/web/color/RGB_Color.html
)
# Set country color gradient according to the number of papers in each country
fig <- plot_geo(occurence)
fig <- fig %>% add_trace(
z = ~count, color = ~count, colors = 'GnBu', #For color brewer palettes: http://www.sthda.com/english/wiki/colors-in-r
text = ~COUNTRY, locations = ~code, marker = list(line = l)
)
# Add lon and lat points to the map, where each location point is related to papers title
fig <- fig %>% add_markers(
x = ~duse$lon, y = ~duse$lat,
text =~duse$title , color = I("black"), size = I(10)
)
# Set color bar
fig <- fig %>% colorbar(title = 'Occurence', tickprefix = '')
# Set title
fig <- fig %>% layout(
title = 'Rootstock x Scion Experiment Locations',
geo = g
)
fig
import plotly.io as pio
pio.write_image(fig, 'image.pdf',scale=6, width=1080, height=1080)
plotly::export(p = fig, #the graph to export
file = "graph 1.png")
directory_path
deprecated
"deprecated"
"Deprecated"
Deprecated
library(orca)
### Install packages if not already in system library
# install.packages("devtools")
install.packages("orca")
library(orca)
orca(fig, "figure123.png", width = <300>, height = <300>)
orca(fig, "figure123.png", width = 300, height = 300)
save_image(fig, "figure123.png", width = 300, height = 300)
# set boundaries to light grey
l <- list(color = toRGB("#D3D3D3"), width = 0.5)
# specify map projection options, resolution, the scode, etc.
g <- list(
projection = list(
type = 'orthographic' # the ones I like: orthographic, mercator. Source: https://plotly.com/r/map-configuration/#map-projections
),
resolution = 50,
scope = "world",
showcoastlines=TRUE,
showland=TRUE,
landcolor = toRGB("#F5F5F5")  # white smoke # for rgb colors: https://www.rapidtables.com/web/color/RGB_Color.html
)
# Set country color gradient according to the number of papers in each country
fig <- plot_geo(occurence)
fig <- fig %>% add_trace(
z = ~count, color = ~count, colors = 'GnBu', #For color brewer palettes: http://www.sthda.com/english/wiki/colors-in-r
text = ~COUNTRY, locations = ~code, marker = list(line = l)
)
# Add lon and lat points to the map, where each location point is related to papers title
fig <- fig %>% add_markers(
x = ~duse$lon, y = ~duse$lat,
text =~duse$title , color = I("black"), size = I(10)
)
# Set color bar
fig <- fig %>% colorbar(title = 'Occurence', tickprefix = '')
# Set title
fig <- fig %>% layout(
title = 'Rootstock x Scion Experiment Locations',
geo = g
)
fig
### Install packages if not already in system library
# install.packages("devtools")
install.packages("kaleido")
